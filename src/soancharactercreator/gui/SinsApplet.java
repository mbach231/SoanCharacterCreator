/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soancharactercreator.gui;

import java.awt.Dimension;
import java.awt.Font;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JPanel;
import javax.swing.ScrollPaneLayout;
import javax.swing.border.TitledBorder;
import soancharactercreator.BaseSkill;
import soancharactercreator.Header;
import soancharactercreator.PlayerCharacter;
import soancharactercreator.Settings.AttributeEn;
import soancharactercreator.Settings.RaceEn;
import soancharactercreator.Skill;
import soancharactercreator.SkillLoader;

/**
 *
 * @author Mike
 */
public class SinsApplet extends javax.swing.JApplet {

    private static PlayerCharacter character_;
    Map<BaseSkill, SkillPanel> skillPanelMap_;
    Map<Header, List<SkillPanel>> headerSkillPanelMap_;

    /**
     * Initializes the applet NewJApplet
     */
    @Override
    public void init() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SinsApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SinsApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SinsApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SinsApplet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the applet */
        try {
            java.awt.EventQueue.invokeAndWait(new Runnable() {
                public void run() {
                    initComponents();

                }
            });
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        character_ = new PlayerCharacter(characterNameTextField.getText(), (String) raceComboBox.getSelectedItem(), (String) cultureComboBox.getSelectedItem());

        skillPanelMap_ = new HashMap();
        headerSkillPanelMap_ = new HashMap();

        List<Header> headerList = SkillLoader.getHeaderList();

        /*
        for (Header header : headerList) {

            SkillPanel headerSkillPanel = new SkillPanel(header, this);

            skillPanelMap_.put(header, headerSkillPanel);

            List<SkillPanel> skillPanelList = new ArrayList();

            skillPanelList.add(headerSkillPanel);

            for (Skill skill : SkillLoader.getHeaderSkills(header)) {

                SkillPanel skillPanel = new SkillPanel(skill, this);
                skillPanelMap_.put(skill, skillPanel);
                skillPanelList.add(skillPanel);
            }

            headerSkillPanelMap_.put(header, skillPanelList);

        }*/

        JPanel skillsPanel = new JPanel();
        skillsPanel.setLayout(new BoxLayout(skillsPanel, BoxLayout.Y_AXIS));
        skillsScrollPane.setLayout(new ScrollPaneLayout());
        skillsScrollPane.getVerticalScrollBar().setUnitIncrement(20);
        skillsScrollPane.setViewportView(skillsPanel);

        for (Header header : headerList) {
            JPanel headerPanel = getSkillHeaderPanel(header);

            skillsPanel.add(headerPanel);
            skillsPanel.add(Box.createRigidArea(new Dimension(0, 5)));

            if (header.getCost() == 0) {
                character_.purchaseSkill(header);
            }
        }

        updatePanels();
    }

    /**
     * This method is called from within the init() method to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        entryFormPanel = new javax.swing.JPanel();
        playerInfoPanel = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        playerNameTextField = new javax.swing.JTextField();
        emailAddressTextField = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        playerInfoPanel1 = new javax.swing.JPanel();
        jTextField4 = new javax.swing.JTextField();
        characterNameTextField = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        raceComboBox = new javax.swing.JComboBox();
        jTextField8 = new javax.swing.JTextField();
        cultureComboBox = new javax.swing.JComboBox();
        includeBackstoryCheckbox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        backstoryTextPane = new javax.swing.JTextPane();
        jTextField5 = new javax.swing.JTextField();
        cpText = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        bpText = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        fpText = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        spText = new javax.swing.JTextField();
        bpSpinner = new javax.swing.JSpinner();
        jTextField15 = new javax.swing.JTextField();
        fpSpinner = new javax.swing.JSpinner();
        spSpinner = new javax.swing.JSpinner();
        skillsScrollPane = new javax.swing.JScrollPane();

        playerInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Player Info"));

        jTextField1.setEditable(false);
        jTextField1.setText("Player Name:");
        jTextField1.setBorder(null);
        jTextField1.setFocusable(false);

        jTextField2.setEditable(false);
        jTextField2.setText("Email Address:");
        jTextField2.setBorder(null);
        jTextField2.setFocusable(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        playerNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerNameTextFieldActionPerformed(evt);
            }
        });

        emailAddressTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emailAddressTextFieldActionPerformed(evt);
            }
        });

        jTextField3.setEditable(false);
        jTextField3.setText("Date Of Birth:");
        jTextField3.setBorder(null);
        jTextField3.setFocusable(false);
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jFormattedTextField1.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("M/d/yyyy"))));
        jFormattedTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFormattedTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerInfoPanelLayout = new javax.swing.GroupLayout(playerInfoPanel);
        playerInfoPanel.setLayout(playerInfoPanelLayout);
        playerInfoPanelLayout.setHorizontalGroup(
            playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(playerInfoPanelLayout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(playerInfoPanelLayout.createSequentialGroup()
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emailAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(playerInfoPanelLayout.createSequentialGroup()
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextField1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playerInfoPanelLayout.setVerticalGroup(
            playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerInfoPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emailAddressTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        playerInfoPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Character Info"));

        jTextField4.setEditable(false);
        jTextField4.setText("Character Name:");
        jTextField4.setBorder(null);
        jTextField4.setFocusable(false);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });

        characterNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                characterNameTextFieldActionPerformed(evt);
            }
        });

        jTextField7.setEditable(false);
        jTextField7.setText("Race:");
        jTextField7.setBorder(null);
        jTextField7.setFocusable(false);
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });

        raceComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Human", "Bastelm", "Ethani", "Korahai", "Rhavmani", "Mulenti", "Arisen", "Homunculi" }));
        raceComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                raceComboBoxActionPerformed(evt);
            }
        });

        jTextField8.setEditable(false);
        jTextField8.setText("Culture:");
        jTextField8.setBorder(null);
        jTextField8.setFocusable(false);
        jTextField8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField8ActionPerformed(evt);
            }
        });

        cultureComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Althaenia", "Khadaan", "Rukazen", "Sulim", "Thran", "Valicia", "Other" }));

        includeBackstoryCheckbox.setText("Include Backstory?");
        includeBackstoryCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                includeBackstoryCheckboxActionPerformed(evt);
            }
        });

        backstoryTextPane.setEnabled(false);
        jScrollPane1.setViewportView(backstoryTextPane);

        jTextField5.setEditable(false);
        jTextField5.setText("Character Points (CP):");
        jTextField5.setBorder(null);
        jTextField5.setFocusable(false);
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        cpText.setEditable(false);
        cpText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        cpText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        cpText.setText("0 / 20");
        cpText.setBorder(null);
        cpText.setFocusable(false);
        cpText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpTextActionPerformed(evt);
            }
        });

        jTextField9.setEditable(false);
        jTextField9.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField9.setText("Additional Purchases");
        jTextField9.setBorder(null);
        jTextField9.setFocusable(false);
        jTextField9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField9ActionPerformed(evt);
            }
        });

        bpText.setEditable(false);
        bpText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bpText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        bpText.setText("2");
        bpText.setBorder(null);
        bpText.setFocusable(false);
        bpText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bpTextActionPerformed(evt);
            }
        });

        jTextField11.setEditable(false);
        jTextField11.setText("Focus Points (FP):");
        jTextField11.setBorder(null);
        jTextField11.setFocusable(false);
        jTextField11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField11ActionPerformed(evt);
            }
        });

        fpText.setEditable(false);
        fpText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fpText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        fpText.setText("2");
        fpText.setBorder(null);
        fpText.setFocusable(false);
        fpText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fpTextActionPerformed(evt);
            }
        });

        jTextField13.setEditable(false);
        jTextField13.setText("Stamina Points (SP):");
        jTextField13.setBorder(null);
        jTextField13.setFocusable(false);
        jTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField13ActionPerformed(evt);
            }
        });

        spText.setEditable(false);
        spText.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spText.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        spText.setText("2");
        spText.setBorder(null);
        spText.setFocusable(false);
        spText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                spTextActionPerformed(evt);
            }
        });

        bpSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        bpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                bpSpinnerStateChanged(evt);
            }
        });

        jTextField15.setEditable(false);
        jTextField15.setText("Blood Points (BP):");
        jTextField15.setBorder(null);
        jTextField15.setFocusable(false);
        jTextField15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField15ActionPerformed(evt);
            }
        });

        fpSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fpSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                fpSpinnerStateChanged(evt);
            }
        });

        spSpinner.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        spSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spSpinnerStateChanged(evt);
            }
        });

        skillsScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Skills"));

        javax.swing.GroupLayout playerInfoPanel1Layout = new javax.swing.GroupLayout(playerInfoPanel1);
        playerInfoPanel1.setLayout(playerInfoPanel1Layout);
        playerInfoPanel1Layout.setHorizontalGroup(
            playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                        .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(characterNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(raceComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cultureComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(includeBackstoryCheckbox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(54, 54, 54)
                        .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(spText))
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fpText))
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(bpText))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerInfoPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cpText, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(bpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(spSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jTextField9, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerInfoPanel1Layout.createSequentialGroup()
                        .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(skillsScrollPane, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1))
                        .addContainerGap())))
        );
        playerInfoPanel1Layout.setVerticalGroup(
            playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerInfoPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(characterNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(raceComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cultureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fpSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(includeBackstoryCheckbox)
                    .addComponent(spSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(skillsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 306, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout entryFormPanelLayout = new javax.swing.GroupLayout(entryFormPanel);
        entryFormPanel.setLayout(entryFormPanelLayout);
        entryFormPanelLayout.setHorizontalGroup(
            entryFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, entryFormPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(entryFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playerInfoPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playerInfoPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        entryFormPanelLayout.setVerticalGroup(
            entryFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(entryFormPanelLayout.createSequentialGroup()
                .addComponent(playerInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(playerInfoPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(entryFormPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(entryFormPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void playerNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_playerNameTextFieldActionPerformed

    private void emailAddressTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emailAddressTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_emailAddressTextFieldActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jFormattedTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFormattedTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jFormattedTextField1ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void characterNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_characterNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_characterNameTextFieldActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void raceComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_raceComboBoxActionPerformed

        skillPanelMap_.get(character_.getFreeRacialHeader()).setCheckbox(true, false);
        skillPanelMap_.get(character_.getFreeRacialHeader()).setSkillEnabled(true);

        character_.setRace((String) raceComboBox.getSelectedItem());

        updatePanels();
    }//GEN-LAST:event_raceComboBoxActionPerformed

    private void jTextField8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField8ActionPerformed

    private void includeBackstoryCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_includeBackstoryCheckboxActionPerformed

        if (includeBackstoryCheckbox.isSelected()) {
            backstoryTextPane.setEnabled(true);
            character_.increaseMaxCp(15);
        } else {
            backstoryTextPane.setEnabled(false);
            character_.decreaseMaxCp(15);
        }

        updatePanels();
    }//GEN-LAST:event_includeBackstoryCheckboxActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void cpTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cpTextActionPerformed

    private void jTextField9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField9ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField9ActionPerformed

    private void bpTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bpTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bpTextActionPerformed

    private void jTextField11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField11ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField11ActionPerformed

    private void fpTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fpTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fpTextActionPerformed

    private void jTextField13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField13ActionPerformed

    private void spTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_spTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_spTextActionPerformed

    private void bpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_bpSpinnerStateChanged
        if ((int) bpSpinner.getValue() < 0) {

            if (character_.getRace().equals(RaceEn.Human) && character_.freeHumanAttributeSetToAttribute(AttributeEn.BP)) {
                character_.decreaseBp();
            }

            bpSpinner.setValue(0);
        } else {

            int value = (int) bpSpinner.getValue();

            if (value > character_.getNumPurchasedBp()) {

                if (character_.hasFreeHumanAttribute()) {
                    character_.increaseBp();
                    bpSpinner.setValue(value - 1);
                } else if (!character_.increaseBp()) {
                    bpSpinner.setValue(value - 1);
                }

            } else if (value < character_.getNumPurchasedBp()) {
                if (!character_.decreaseBp()) {
                    bpSpinner.setValue(value + 1);
                }
            }

            updatePanels();
        }
    }//GEN-LAST:event_bpSpinnerStateChanged

    private void jTextField15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField15ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField15ActionPerformed

    private void fpSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_fpSpinnerStateChanged
        if ((int) fpSpinner.getValue() < 0) {

            if (character_.getRace().equals(RaceEn.Human) && character_.freeHumanAttributeSetToAttribute(AttributeEn.FP)) {
                character_.decreaseFp();
            }

            fpSpinner.setValue(0);
        } else {

            int value = (int) fpSpinner.getValue();

            if (value > character_.getNumPurchasedFp()) {

                if (character_.hasFreeHumanAttribute()) {
                    character_.increaseFp();
                    fpSpinner.setValue(value - 1);
                } else if (!character_.increaseFp()) {
                    fpSpinner.setValue(value - 1);
                }

            } else if (value < character_.getNumPurchasedFp()) {
                if (!character_.decreaseFp()) {
                    fpSpinner.setValue(value + 1);
                }
            }

            updatePanels();
        }
    }//GEN-LAST:event_fpSpinnerStateChanged

    private void spSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spSpinnerStateChanged
        if ((int) spSpinner.getValue() < 0) {

            if (character_.getRace().equals(RaceEn.Human) && character_.freeHumanAttributeSetToAttribute(AttributeEn.SP)) {
                character_.decreaseSp();
            }

            spSpinner.setValue(0);
        } else {

            int value = (int) spSpinner.getValue();

            if (value > character_.getNumPurchasedSp()) {

                if (character_.hasFreeHumanAttribute()) {
                    character_.increaseSp();
                    spSpinner.setValue(value - 1);
                } else if (!character_.increaseSp()) {
                    spSpinner.setValue(value - 1);
                }

            } else if (value < character_.getNumPurchasedSp()) {
                if (!character_.decreaseSp()) {
                    spSpinner.setValue(value + 1);
                }
            }

            updatePanels();
        }
    }//GEN-LAST:event_spSpinnerStateChanged
    public void skillPanelCheckboxSelected(SkillPanel panel) {
        character_.purchaseSkill(panel.getSkill());
        updatePanels();
    }

    public void skillPanelCheckboxUnselected(SkillPanel panel) {
        character_.removeSkill(panel.getSkill());
        updatePanels();
    }

    public void updatePanels() {
        cpText.setText(String.valueOf(character_.getCp()) + " / " + String.valueOf(character_.getMaxCp()));
        bpText.setText(String.valueOf(character_.getBp()));
        fpText.setText(String.valueOf(character_.getFp()));
        spText.setText(String.valueOf(character_.getSp()));

        for (BaseSkill skill : skillPanelMap_.keySet()) {

            SkillPanel skillPanel = skillPanelMap_.get(skill);

            skillPanel.resetCostText();

            if (skill.getCost() == 0) {
                skillPanel.setSkillEnabled(true);
                skillPanel.setCheckbox(false, true);
            } else if (character_.hasSkill(skill)) {
                skillPanel.setSkillEnabled(true);
            } else if (character_.canPurchaseSkill(skill)) {
                skillPanel.setSkillEnabled(true);
            } else {
                skillPanel.setSkillEnabled(false);
                skillPanel.setCheckbox(false, false);
            }
        }

        SkillPanel freeHeaderPanel = skillPanelMap_.get(character_.getFreeRacialHeader());
        //Header freeRacialHeader = character_.getFreeRacialHeader();

        freeHeaderPanel.setSkillEnabled(true);
        freeHeaderPanel.setCheckbox(false, true);
        freeHeaderPanel.setCostTextToFree();

    }

    private JPanel getSkillHeaderPanel(Header header) {

        JPanel panel = new JPanel();

        //panel.setPreferredSize(new Dimension(150, 60));
        panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        //panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
        TitledBorder border = new TitledBorder(header.getName());
        border.setTitleFont(new Font("Tahoma", Font.ITALIC, 14));

        panel.setBorder(border);

        for (SkillPanel skillPanel : headerSkillPanelMap_.get(header)) {
            panel.add(skillPanel);
        }

        /*
         panel.add(new SkillPanel(header));

         List<Skill> headerSkills = SkillLoader.getHeaderSkills(header);

         System.out.println("Header: " + header.getName());
        
         for (Skill skill : headerSkills) {
         panel.add(new SkillPanel(skill));
         System.out.println("\t - " + skill.getName());
         }
         */
        //JTextField skillNameTextField = new JTextField(skill.getName());
        //skillNameTextField.setEditable(false);
        //panel.add(skillNameTextField);
        return panel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane backstoryTextPane;
    private javax.swing.JSpinner bpSpinner;
    private javax.swing.JTextField bpText;
    private javax.swing.JTextField characterNameTextField;
    private javax.swing.JTextField cpText;
    private javax.swing.JComboBox cultureComboBox;
    private javax.swing.JTextField emailAddressTextField;
    private javax.swing.JPanel entryFormPanel;
    private javax.swing.JSpinner fpSpinner;
    private javax.swing.JTextField fpText;
    private javax.swing.JCheckBox includeBackstoryCheckbox;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JPanel playerInfoPanel;
    private javax.swing.JPanel playerInfoPanel1;
    private javax.swing.JTextField playerNameTextField;
    private javax.swing.JComboBox raceComboBox;
    private javax.swing.JScrollPane skillsScrollPane;
    private javax.swing.JSpinner spSpinner;
    private javax.swing.JTextField spText;
    // End of variables declaration//GEN-END:variables
}
